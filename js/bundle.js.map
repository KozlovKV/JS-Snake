{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;AAA4B;AACA;AACgB;AAC5C;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAK;AAC9B,yBAAyB,8CAAK;AAC9B,6BAA6B,sDAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,sBAAsB,IAAI,mBAAmB;AACxF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAK;AAC9B,yBAAyB,8CAAK;AAC9B;AACA;;;;;;;;;;;;;;ACzEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClCe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACde;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,iBAAiB,aAAa;AAC9B,aAAa;AACb,2BAA2B;AAC3B,iBAAiB,4BAA4B;AAC7C,aAAa;AACb,0BAA0B;AAC1B,iBAAiB,aAAa;AAC9B,aAAa;AACb,0BAA0B;AAC1B,iBAAiB,6BAA6B;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,uBAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,uBAAuB;AACvB,cAAc;AACd,mCAAmC;AACnC,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UC9IA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN8C;AAC9C;AACA;AACA;AACA;AACA,yBAAyB,2DAAU;AACnC;AACA,CAAC,E","sources":["webpack://snakegame/./js/modules/GameEngine.js","webpack://snakegame/./js/modules/RecordTableDB.js","webpack://snakegame/./js/modules/apple.js","webpack://snakegame/./js/modules/snake.js","webpack://snakegame/webpack/bootstrap","webpack://snakegame/webpack/runtime/define property getters","webpack://snakegame/webpack/runtime/hasOwnProperty shorthand","webpack://snakegame/webpack/runtime/make namespace object","webpack://snakegame/./js/script.js"],"sourcesContent":["import Snake from \"./snake\";\r\nimport Apple from \"./apple\";\r\nimport RecordTableDB from \"./RecordTableDB\";\r\n\r\n\r\nexport default class GameEngine {\r\n    constructor(fps=24) {\r\n        this.fps = fps;\r\n        this.timerId = 0;\r\n        this.score = 0;\r\n        this.canvas = document.getElementById('game');\r\n        this.context = this.canvas.getContext('2d');\r\n        this.grid = 16;\r\n\r\n        \r\n\r\n        this.snake = new Snake(this);\r\n        this.apple = new Apple(this);\r\n        this.recordsDB = new RecordTableDB('http://localhost:3000/records');\r\n        this.reloadDB();\r\n        this.highscores = [];\r\n    }\r\n\r\n    async reloadDB() {\r\n        await this.recordsDB.loadRecordsObject();\r\n        this.highscores = this.recordsDB.getRecords();\r\n        this.updateHighscoresTable();\r\n    }\r\n\r\n    loop() {\r\n        // Очищаем игровое поле\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // Рисуем еду — красное яблоко\r\n        this.context.fillStyle = 'red';\r\n        this.context.fillRect(this.apple.x, this.apple.y, this.grid-1, this.grid-1);\r\n\r\n        // Одно движение змейки — один новый нарисованный квадратик \r\n        this.context.fillStyle = 'green';\r\n\r\n        // Обрабатываем каждый элемент змейки\r\n        this.snake.move();\r\n\r\n        this.score = this.snake.cells.length;\r\n        document.getElementById('score').innerText = this.score;\r\n        document.getElementById('fps').innerText = this.fps;\r\n        \r\n        this.timerId = setTimeout(() => this.loop(), 1000/this.fps);\r\n    }\r\n\r\n    updateHighscoresTable() {\r\n        let highscoreListElement = document.querySelector('#highscores ol');\r\n        highscoreListElement.innerHTML = '';\r\n        this.highscores.forEach(recordObject => {\r\n            let recordElement = document.createElement('li');\r\n            recordElement.textContent = `${recordObject.username}: ${recordObject.score}`;\r\n            highscoreListElement.append(recordElement);\r\n        });\r\n    }\r\n\r\n    restart() {\r\n        let username = document.querySelector('#username').value;\r\n        username = username.length ? username : 'NONAME';\r\n        let recordObject = {\r\n            username: username,\r\n            score: this.score,\r\n        };\r\n        this.recordsDB.addRecord(recordObject);\r\n        this.reloadDB();\r\n        this.score = 0;\r\n        this.snake = new Snake(this);\r\n        this.apple = new Apple(this);\r\n    }\r\n}","export default class RecordTableDB {\r\n    constructor(url) {\r\n        this.url = url + '?_sort=score&_order=desc';\r\n        this.recordsArray = [];\r\n        this.loadRecordsObject();\r\n    }\r\n\r\n    async loadRecordsObject(debug=false) {\r\n        this.recordsArray = await fetch(this.url)\r\n        .then(response => response.json());\r\n        if (debug) { console.log(this.recordsArray); }\r\n    }\r\n    \r\n    getNewId() {\r\n        return this.recordsArray.sort((a, b) => b.id - a.id)[0].id + 1;\r\n    }\r\n\r\n    async addRecord(newRecordObject, debug=false) {\r\n        newRecordObject.id = this.getNewId();\r\n        this.recordsArray = await fetch(this.url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newRecordObject)\r\n        })\r\n        .then(response => response.json());\r\n        if (debug) { console.log(this.recordsArray); }\r\n    }\r\n\r\n    getRecords(count=10) {\r\n        this.loadRecordsObject();\r\n        return this.recordsArray.slice(0, count);\r\n    }\r\n}","export default class Apple {\r\n    constructor(engine) { \r\n        this.engine = engine;\r\n        this.updatePos();\r\n    }\r\n\r\n    updatePos() {\r\n        this.x = getRandomInt(0, 25) * this.engine.grid;\r\n        this.y = getRandomInt(0, 25) * this.engine.grid;\r\n    }\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}","export default class Snake {\r\n    constructor(engine) {\r\n        this.engine = engine;\r\n        this.x = 160;\r\n        this.y = 160;\r\n        this.cells = [];\r\n        this.maxCells = 4;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this._changePatterns = {};\r\n        this.setChangePatterns();\r\n        this.setEvents();\r\n        this.changeVelocity('right');\r\n    }\r\n\r\n    setChangePatterns() {\r\n        this._changePatterns = {\r\n            up: () => { if (this.dy === 0) \r\n                {this.dx = 0; this.dy = -this.engine.grid;} \r\n            },\r\n            right: () => { if (this.dx === 0) \r\n                {this.dx = this.engine.grid; this.dy = 0;}\r\n            },\r\n            down: () => { if (this.dy === 0) \r\n                {this.dx = 0; this.dy = this.engine.grid;}\r\n            },\r\n            left: () => { if (this.dx === 0) \r\n                {this.dx = -this.engine.grid; this.dy = 0;}\r\n            },\r\n        };\r\n    }\r\n\r\n    move() {\r\n        // Двигаем змейку с нужной скоростью\r\n        this.x += this.dx;\r\n        this.y += this.dy;\r\n\r\n        // Если змейка достигла края поля по горизонтали — продолжаем её движение с противоположной строны\r\n        if (this.x < 0) {\r\n            this.x = this.engine.canvas.width - this.engine.grid;\r\n        }\r\n        else if (this.x >= this.engine.canvas.width) {\r\n            this.x = 0;\r\n        }\r\n\r\n        // Делаем то же самое для движения по вертикали\r\n        if (this.y < 0) {\r\n            this.y = this.engine.canvas.height - this.engine.grid;\r\n        }\r\n        else if (this.y >= this.engine.canvas.height) {\r\n            this.y = 0;\r\n        }\r\n\r\n        // Продолжаем двигаться в выбранном направлении. \r\n        // Голова всегда впереди, поэтому добавляем её координаты в начало массива, \r\n        // который отвечает за всю змейку\r\n        this.cells.unshift({x: this.x, y: this.y});\r\n\r\n        // Сразу после этого удаляем последний элемент из массива змейки, \r\n        // потому что она движется и постоянно освобождает клетки после себя\r\n        if (this.cells.length > this.maxCells) {\r\n            this.cells.pop();\r\n        }\r\n\r\n        this.cells.forEach((cell, index) => {\r\n            // Чтобы создать эффект клеточек, делаем зелёные квадратики меньше на один пиксель, \r\n            // чтобы вокруг них образовалась чёрная граница\r\n            this.engine.context.fillRect(cell.x, cell.y, this.engine.grid-1, this.engine.grid-1);  \r\n            // Если змейка добралась до яблока...\r\n            if (cell.x === this.engine.apple.x && cell.y === this.engine.apple.y) {\r\n                // увеличиваем длину змейки\r\n                this.maxCells++;\r\n                this.engine.apple.updatePos();\r\n            }\r\n    \r\n            // Проверяем, не столкнулась ли змея сама с собой\r\n            // Для этого перебираем весь массив и смотрим, \r\n            // есть ли у нас в массиве змейки две клетки с одинаковыми координатами \r\n            for (var i = index + 1; i < this.cells.length; i++) {\r\n                // Если такие клетки есть — начинаем игру заново\r\n                if (cell.x === this.cells[i].x && cell.y === this.cells[i].y) {\r\n                    this.engine.restart();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    setEvents() {\r\n        document.addEventListener('keydown', (e) => {\r\n            this.processKeyDownEvent(e);\r\n        });\r\n\r\n        let controller = document.getElementById('touch_controller');\r\n        let start, end;\r\n        this.engine.canvas.addEventListener('touchstart', (e) => {\r\n            let controller = document.getElementById('touch_controller');\r\n            let touch = e.changedTouches[0];\r\n            controller.classList.remove('hide__right');\r\n            controller.style.left = touch.clientX + 'px';\r\n            controller.style.top = touch.clientY + 'px';\r\n            start = [e.changedTouches[0].clientX, e.changedTouches[0].clientY];\r\n        });\r\n        let endTouchCallBack = (e) => {\r\n            let controller = document.getElementById('touch_controller');\r\n            end = [e.changedTouches[0].clientX, e.changedTouches[0].clientY];\r\n            let vec = {\r\n                x: end[0] - start[0],\r\n                y: -(end[1] - start[1]),\r\n            };\r\n            vec.len = Math.sqrt(vec.x ** 2 + vec.y ** 2);\r\n            vec.sin = vec.y / vec.len;\r\n            vec.cos = vec.x / vec.len;\r\n            if (Math.abs(vec.sin) > Math.abs(vec.cos)) {\r\n                if (vec.sin > 0) { this.changeVelocity('up'); }\r\n                else { this.changeVelocity('down'); }\r\n            } else {\r\n                if (vec.cos > 0) { this.changeVelocity('right'); }\r\n                else { this.changeVelocity('left'); }\r\n            }\r\n            controller.classList.add('hide__right');\r\n        };\r\n        this.engine.canvas.addEventListener('touchend', endTouchCallBack);\r\n        controller.addEventListener('touchend', endTouchCallBack);\r\n\r\n        \r\n    }\r\n\r\n    changeVelocity(direction) {\r\n        this._changePatterns[direction]();\r\n    }\r\n\r\n    processKeyDownEvent(event) {\r\n        let keysToDirectionDict = {\r\n            ArrowUp: 'up',\r\n            ArrowRight: 'right',\r\n            ArrowDown: 'down',\r\n            ArrowLeft: 'left',\r\n        };\r\n        if (Object.entries(keysToDirectionDict).some(pair => pair[0] == event.key)) {\r\n            this.changeVelocity(keysToDirectionDict[event.key]);\r\n        }\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import GameEngine from \"./modules/GameEngine\";\r\n\r\nwindow.addEventListener('load', e => {\r\n    'use strict';\r\n    \r\n    let gameEngine = new GameEngine();\r\n    gameEngine.loop();\r\n});"],"names":[],"sourceRoot":""}